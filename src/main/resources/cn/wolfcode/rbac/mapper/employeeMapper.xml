<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.wolfcode.rbac.mapper.EmployeeMapper">
    <resultMap id="departmentMap" type="Department">
        <id column="deptId" property="id" javaType="Long" jdbcType="BIGINT"/>
        <result column="deptName" property="name" javaType="String" jdbcType="VARCHAR"/>
        <result column="sn" property="sn" javaType="String" jdbcType="VARCHAR"/>
    </resultMap>
    <resultMap id="roleMap" type="Role">
        <id column="id" property="id" javaType="Long" jdbcType="BIGINT"/>
        <result column="name" property="name" javaType="String" jdbcType="VARCHAR"/>
        <result column="sn" property="sn" javaType="String" jdbcType="VARCHAR"/>
    </resultMap>
    <resultMap id="employeeMap" type="Employee">
        <id column="id" property="id" jdbcType="BIGINT" javaType="Long"/>
        <result column="name" property="name" jdbcType="VARCHAR" javaType="String"/>
        <result column="password" property="password" jdbcType="VARCHAR" javaType="String"/>
        <result column="email" property="email" jdbcType="VARCHAR" javaType="String"/>
        <result column="age" property="age" jdbcType="INTEGER" javaType="Integer"/>
        <result column="admin" property="admin" jdbcType="BIT" javaType="Boolean"/>
        <association property="dept" column="dept_id" resultMap="departmentMap"/>
        <collection property="roles" resultMap="roleMap"/>
    </resultMap>

    <select id="listAllCondition" parameterType="cn.wolfcode.rbac.common.QueryObject" resultMap="employeeMap">
        select t1.id,t1.name,t1.email,t1.age,t1.admin,t2.id as deptId, t2.name as deptName
        from employee as t1 left join department as t2
        on t1.dept_id = t2.id
        <where>
            <if test="keyword != null and keyword != ''">
                t1.name like concat('%',#{keyword},'%') or t1.email like concat('%',#{keyword},'%')
            </if>
            <choose>
                <when test="deptId != -1">
                    and t1.dept_id = #{deptId}
                </when>
<!--                <otherwise>-->
<!--                    and t1.dept_id is not null-->
<!--                </otherwise>-->
            </choose>
        </where>
    </select>
    <select id="selectById" parameterType="Long" resultMap="employeeMap">
         select t1.id,t1.name,t1.email,t1.age,t1.admin,t2.id as deptId, t2.name as deptName
        from employee as t1
        left join department as t2 on t1.dept_id = t2.id
         where t1.id = #{id}
    </select>
    <select id="selectRoleByEmId" parameterType="Long" resultMap="roleMap">
         select  t1.id , t1.name , t1.sn from  role as t1
         left join employee_role as t2
         on t1.id = t2.role_id
         where t2.employee_id = #{emId}
    </select>
    <select id="selectByName" resultMap="employeeMap">
        select id,name ,password,admin from employee where name = #{name}
    </select>
    <insert id="insert" parameterType="Employee" useGeneratedKeys="true" keyProperty="id">
        insert into employee (name,password,email, age, admin ,dept_id)
        values (#{name},#{password},#{email},#{age}, #{admin},#{dept.id})
    </insert>

    <insert id="insertEmployeeAndRoles" parameterType="Long">
        insert into employee_role(employee_id,role_id) values (#{emId},#{roleId})
    </insert>
    <update id="updateByPrimaryKey" parameterType="Employee">
        update  employee set name = #{name}, email = #{email}, age = #{age},
        admin = #{admin}, dept_id = #{dept.id} where id = #{id}
    </update>
    <delete id="deleteByPrimaryKey" parameterType="Long">
        delete from employee where id = #{id}
    </delete>
    <delete id="deleteRolesByEmId" parameterType="Long">
        delete from employee_role where employee_id = #{emId}
    </delete>
</mapper>